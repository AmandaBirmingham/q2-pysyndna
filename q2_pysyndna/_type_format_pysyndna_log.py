import os
from typing import List, Optional
from qiime2.plugin import SemanticType
import qiime2.plugin.model as model


# This is not log-specific; I just don't have a better place to put it
def extract_fp_from_directory_format(
        a_format: model.DirectoryFormat,
        a_bound_file: model.directory_format.BoundFile) -> str:
    curr_dir = str(a_format)
    curr_path = os.path.join(curr_dir, str(a_bound_file.pathspec))
    return curr_path


PysyndnaLog = SemanticType("PysyndnaLog")


class PysyndnaLogFormat(model.TextFileFormat):
    """Represents a log file of messages generated by pysyndna."""

    def _validate_(self, level):
        # Validate that it's a readable text file ... no contents required.
        with self.path.open("r"):
            pass


PysyndnaLogDirectoryFormat = model.SingleFileDirectoryFormat(
    'PysyndnaLogDirectoryFormat',
    'pysyndna.log', PysyndnaLogFormat)


def load_list_from_pysyndnalog_fp(log_fp) -> List[str]:
    with open(log_fp, "r") as fh:
        return [line.strip() for line in fh]


def fill_pysyndnalogformat(
        data: List[str],
        ff: Optional[PysyndnaLogFormat] = None)\
        -> PysyndnaLogFormat:
    data_str = '\n'.join(data)
    if ff is None:
        ff = PysyndnaLogFormat()
    with ff.open() as fh:
        fh.write(data_str)
    return ff


def extract_list_from_pysyndnalogdir_format(
        data: PysyndnaLogDirectoryFormat) -> list:
    curr_path = extract_fp_from_directory_format(data, data.file)
    return load_list_from_pysyndnalog_fp(curr_path)
